{"version":3,"sources":["useSessionState.js","AdaptiveCardJSONPanel.js","AdaptiveCardRenderPanel.js","App.js","reportWebVitals.js","index.js"],"names":["warnedBrowserBlockStorage","AdaptiveCardJSONPanel","className","onChange","value","handleChange","useCallback","target","classNames","useSessionState","initialValue","key","sessionStorage","useMemo","window","err","console","warn","useState","getItem","setValue","nextValue","setItem","AdaptiveCardRenderPanel","json","rawEnableMarkdown","setRawEnableMarkdown","adaptiveCardContentRef","useRef","enableMarkdown","setEnableMarkdown","handleEnableMarkdownChange","checked","markdownIt","MarkdownIt","adaptiveCard","AdaptiveCard","constructor","onProcessMarkdown","text","result","outputHtml","render","didProcess","undefined","content","JSON","parse","serializationContext","SerializationContext","eventCount","errors","i","push","getEventAt","error","join","message","useEffect","adaptiveCardContent","current","element","children","length","removeChild","appendChild","type","ref","App","adaptiveCardJSON","setAdaptiveCardJSON","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dcd71e3.chunk.js","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nlet warnedBrowserBlockStorage;\n\nexport default function useSessionState(initialValue, key) {\n  const sessionStorage = useMemo(() => {\n    // Accessing window.sessionStorage will failed if browser block cookies.\n    try {\n      return window.sessionStorage;\n    } catch (err) {\n      warnedBrowserBlockStorage || console.warn('useSessionState: Browser blocked access to sessionStorage, state will not be saved.');\n      warnedBrowserBlockStorage = true;\n    }\n  }, []);\n\n  const [value, setValue] = useState(() => (sessionStorage && sessionStorage.getItem(key)) || initialValue);\n\n  const setValueWithSession = useCallback(\n    nextValue => {\n      setValue(nextValue);\n\n      sessionStorage && sessionStorage.setItem(key, nextValue);\n    },\n    [key, sessionStorage]\n  );\n\n  return [value, setValueWithSession];\n}\n","import { useCallback } from 'react';\nimport classNames from 'classnames';\n\nimport './AdaptiveCardJSONPanel.css';\n\nconst AdaptiveCardJSONPanel = ({ className, onChange, value }) => {\n  const handleChange = useCallback(\n    ({ target: { value } }) => {\n      onChange && onChange(value);\n    },\n    [onChange]\n  );\n\n  return <textarea className={classNames('ac-json-panel', className)} onChange={handleChange} value={value} />;\n};\n\nexport default AdaptiveCardJSONPanel;\n","import { AdaptiveCard, SerializationContext } from 'adaptivecards';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport classNames from 'classnames';\nimport MarkdownIt from 'markdown-it';\n\nimport './AdaptiveCardRenderPanel.css';\n\nimport useSessionState from './useSessionState';\n\nconst AdaptiveCardRenderPanel = ({ className, json }) => {\n  const [rawEnableMarkdown, setRawEnableMarkdown] = useSessionState('false', 'ENABLE_MARKDOWN');\n  const adaptiveCardContentRef = useRef();\n\n  const enableMarkdown = rawEnableMarkdown === 'true';\n  const setEnableMarkdown = useCallback(value => setRawEnableMarkdown(!!value + ''), [setRawEnableMarkdown]);\n\n  const handleEnableMarkdownChange = useCallback(\n    ({ target: { checked } }) => {\n      setEnableMarkdown(checked);\n    },\n    [setEnableMarkdown]\n  );\n\n  const markdownIt = useMemo(() => enableMarkdown && new MarkdownIt(), [enableMarkdown]);\n\n  const { adaptiveCard, error } = useMemo(() => {\n    try {\n      const adaptiveCard = new AdaptiveCard();\n\n      if (markdownIt) {\n        adaptiveCard.constructor.onProcessMarkdown = (text, result) => {\n          result.outputHtml = markdownIt.render(text);\n          result.didProcess = true;\n        };\n      } else {\n        adaptiveCard.constructor.onProcessMarkdown = undefined;\n      }\n\n      const content = JSON.parse(json);\n      const serializationContext = new SerializationContext();\n\n      adaptiveCard.parse(content, serializationContext);\n\n      const { eventCount } = serializationContext;\n\n      if (eventCount) {\n        let errors = [];\n\n        for (let i = 0; i < eventCount; i++) {\n          errors.push(serializationContext.getEventAt(i));\n        }\n\n        return { error: errors.join(', ') };\n      }\n\n      return { adaptiveCard };\n    } catch (err) {\n      return { error: err.message };\n    }\n  }, [json, markdownIt]);\n\n  useEffect(() => {\n    if (!adaptiveCard) {\n      return;\n    }\n\n    const { current: adaptiveCardContent } = adaptiveCardContentRef;\n    const element = adaptiveCard.render();\n\n    while (adaptiveCardContent.children.length) {\n      adaptiveCardContent.removeChild(adaptiveCardContent.children[0]);\n    }\n\n    adaptiveCardContent.appendChild(element);\n  }, [adaptiveCard, adaptiveCardContentRef]);\n\n  return (\n    <div className={classNames('ac-render-panel', className)}>\n      <div className=\"ac-render-panel__button-bar\">\n        <label>\n          <input type=\"checkbox\" checked={enableMarkdown} onChange={handleEnableMarkdownChange} />\n          Enable Markdown\n        </label>\n      </div>\n      {error ? (\n        <div className=\"ac-render-panel__error\">{error}</div>\n      ) : (\n        <div className=\"ac-render-panel__adaptive-card\" ref={adaptiveCardContentRef} />\n      )}\n    </div>\n  );\n};\n\nexport default AdaptiveCardRenderPanel;\n","import './App.css';\n\nimport AdaptiveCardJSONPanel from './AdaptiveCardJSONPanel';\nimport AdaptiveCardRenderPanel from './AdaptiveCardRenderPanel';\nimport useSessionState from './useSessionState';\n\nfunction App() {\n  const [adaptiveCardJSON, setAdaptiveCardJSON] = useSessionState('', 'ADAPTIVE_CARD_JSON');\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__set\">\n        <div className=\"app__panel-title\">Adaptive Card JSON</div>\n        <AdaptiveCardJSONPanel onChange={setAdaptiveCardJSON} value={adaptiveCardJSON} />\n      </div>\n      <div className=\"app__set\">\n        <div className=\"app__panel-title\">Adaptive Card render</div>\n        <AdaptiveCardRenderPanel json={adaptiveCardJSON} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}